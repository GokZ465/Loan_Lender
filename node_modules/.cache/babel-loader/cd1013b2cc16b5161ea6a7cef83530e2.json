{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { fireStore } from \"../fireBaeDateBae/config\";\nimport React from \"react\";\nexport const useCollection = (collection, _query) => {\n  _s();\n\n  const [documents, setDocuments] = useState(null);\n  const [error, setError] = useState(null);\n  const query = useRef(_query).current;\n  useEffect(() => {\n    let ref = fireStore.collection(collection);\n\n    if (query) {\n      ref = ref.where(...query);\n    }\n\n    const unsubscribe = ref.onSnapshot(snapshot => {\n      let results = [];\n      snapshot.docs.forEach(doc => {\n        console.log(doc);\n        results.push({ ...doc.data(),\n          id: doc.id\n        });\n      }); // update state\n\n      setDocuments(results);\n      setError(null);\n    }, error => {\n      console.log(error);\n      setError('could not fetch the data');\n    }); // unsubscribe on unmount\n\n    return () => unsubscribe();\n  }, [collection, query]);\n  return {\n    documents,\n    error\n  };\n};\n\n_s(useCollection, \"QgmmqiSmI/cD8zVX9t4Ujn3/Cto=\");","map":{"version":3,"names":["useEffect","useState","fireStore","React","useCollection","collection","_query","documents","setDocuments","error","setError","query","useRef","current","ref","where","unsubscribe","onSnapshot","snapshot","results","docs","forEach","doc","console","log","push","data","id"],"sources":["E:/movie/loanLender/loanlender/src/hooks/useCollection.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { fireStore } from \"../fireBaeDateBae/config\";\r\n\r\nimport React from \"react\";\r\n\r\nexport const useCollection = (collection, _query) => {\r\n    const [documents, setDocuments] = useState(null)\r\n    const [error, setError] = useState(null)\r\n  \r\n   \r\n    const query = useRef(_query).current\r\n  \r\n    useEffect(() => {\r\n      let ref = fireStore.collection(collection)\r\n  \r\n      if (query) {\r\n        ref = ref.where(...query)\r\n      }\r\n  \r\n      const unsubscribe = ref.onSnapshot(snapshot => {\r\n        let results = []\r\n        snapshot.docs.forEach(doc => {\r\n          console.log(doc)\r\n          results.push({...doc.data(), id: doc.id})\r\n        });\r\n        \r\n        // update state\r\n        setDocuments(results)\r\n        setError(null)\r\n      }, error => {\r\n        console.log(error)\r\n        setError('could not fetch the data')\r\n      })\r\n  \r\n      // unsubscribe on unmount\r\n      return () => unsubscribe()\r\n  \r\n    }, [collection, query])\r\n  \r\n    return { documents, error }\r\n  }"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAaC,MAAb,KAAwB;EAAA;;EACjD,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;EAGA,MAAMU,KAAK,GAAGC,MAAM,CAACN,MAAD,CAAN,CAAeO,OAA7B;EAEAb,SAAS,CAAC,MAAM;IACd,IAAIc,GAAG,GAAGZ,SAAS,CAACG,UAAV,CAAqBA,UAArB,CAAV;;IAEA,IAAIM,KAAJ,EAAW;MACTG,GAAG,GAAGA,GAAG,CAACC,KAAJ,CAAU,GAAGJ,KAAb,CAAN;IACD;;IAED,MAAMK,WAAW,GAAGF,GAAG,CAACG,UAAJ,CAAeC,QAAQ,IAAI;MAC7C,IAAIC,OAAO,GAAG,EAAd;MACAD,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsBC,GAAG,IAAI;QAC3BC,OAAO,CAACC,GAAR,CAAYF,GAAZ;QACAH,OAAO,CAACM,IAAR,CAAa,EAAC,GAAGH,GAAG,CAACI,IAAJ,EAAJ;UAAgBC,EAAE,EAAEL,GAAG,CAACK;QAAxB,CAAb;MACD,CAHD,EAF6C,CAO7C;;MACAnB,YAAY,CAACW,OAAD,CAAZ;MACAT,QAAQ,CAAC,IAAD,CAAR;IACD,CAVmB,EAUjBD,KAAK,IAAI;MACVc,OAAO,CAACC,GAAR,CAAYf,KAAZ;MACAC,QAAQ,CAAC,0BAAD,CAAR;IACD,CAbmB,CAApB,CAPc,CAsBd;;IACA,OAAO,MAAMM,WAAW,EAAxB;EAED,CAzBQ,EAyBN,CAACX,UAAD,EAAaM,KAAb,CAzBM,CAAT;EA2BA,OAAO;IAAEJ,SAAF;IAAaE;EAAb,CAAP;AACD,CAnCI;;GAAML,a"},"metadata":{},"sourceType":"module"}