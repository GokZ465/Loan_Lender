{"ast":null,"code":"import { __assign, __values, __read, __awaiter, __generator, __spreadArray } from 'tslib';\nimport { Deferred } from '@firebase/util';\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\n\nvar Component =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n    this.onInstanceCreated = null;\n  }\n\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n\n  Component.prototype.setInstanceCreatedCallback = function (callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  };\n\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nvar Provider =\n/** @class */\nfunction () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.onInitCallbacks = new Set();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  Provider.prototype.get = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    } // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n\n  Provider.prototype.getImmediate = function (options) {\n    var _a = __assign({\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false\n    }, options),\n        identifier = _a.identifier,\n        optional = _a.optional; // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(\"Service \" + this.name + \" is not available\");\n      }\n    }\n  };\n\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\n    }\n\n    if (this.component) {\n      throw Error(\"Component for \" + this.name + \" has already been provided\");\n    }\n\n    this.component = component; // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n\n    if (!this.shouldAutoInitialize()) {\n      return;\n    } // if the service is eager, initialize the default instance\n\n\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            instanceIdentifier = _d[0],\n            instanceDeferred = _d[1];\n\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {// when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }; // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n\n\n  Provider.prototype.delete = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var services;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4\n            /*yield*/\n            , Promise.all(__spreadArray(__spreadArray([], __read(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            }))), __read(services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            }))))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n\n  Provider.prototype.isInitialized = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    return this.instances.has(identifier);\n  };\n\n  Provider.prototype.initialize = function (opts) {\n    var e_2, _a;\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _b = opts.instanceIdentifier,\n        instanceIdentifier = _b === void 0 ? DEFAULT_ENTRY_NAME : _b,\n        _c = opts.options,\n        options = _c === void 0 ? {} : _c;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(this.name + \"(\" + normalizedIdentifier + \") has already been initialized\");\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(\"Component \" + this.name + \" has not been registered yet\");\n    }\n\n    var instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options: options\n    });\n\n    try {\n      // resolve any pending promise waiting for the service instance\n      for (var _d = __values(this.instancesDeferred.entries()), _e = _d.next(); !_e.done; _e = _d.next()) {\n        var _f = __read(_e.value, 2),\n            instanceIdentifier_1 = _f[0],\n            instanceDeferred = _f[1];\n\n        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier_1);\n\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    this.invokeOnInitCallbacks(instance, normalizedIdentifier);\n    return instance;\n  };\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @returns a function to unregister the callback\r\n   */\n\n\n  Provider.prototype.onInit = function (callback) {\n    var _this = this;\n\n    this.onInitCallbacks.add(callback);\n    return function () {\n      _this.onInitCallbacks.delete(callback);\n    };\n  };\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n\n\n  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\n    var e_3, _a;\n\n    try {\n      for (var _b = __values(this.onInitCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var callback = _c.value;\n\n        try {\n          callback(instance, identifier);\n        } catch (_d) {// ignore errors in the onInit callback\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  Provider.prototype.getOrInitializeService = function (_a) {\n    var instanceIdentifier = _a.instanceIdentifier,\n        _b = _a.options,\n        options = _b === void 0 ? {} : _b;\n    var instance = this.instances.get(instanceIdentifier);\n\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options: options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_c) {// ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  };\n\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  Provider.prototype.shouldAutoInitialize = function () {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\"\n    /* EXPLICIT */\n    ;\n  };\n\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\n\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar ComponentContainer =\n/** @class */\nfunction () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\n    }\n\n    provider.setComponent(component);\n  };\n\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n\n\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    } // create a Provider for a service that hasn't registered with Firebase\n\n\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n\n  return ComponentContainer;\n}();\n\nexport { Component, ComponentContainer, Provider };","map":{"version":3,"mappings":"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","names":["name","instanceFactory","type","Component","mode","instantiationMode","multipleInstances","props","serviceProps","callback","onInstanceCreated","DEFAULT_ENTRY_NAME","container","Map","Set","Provider","identifier","normalizedIdentifier","normalizeInstanceIdentifier","instancesDeferred","has","deferred","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","get","promise","options","optional","Error","component","isComponentEager","entries","_c","instanceDeferred","delete","instances","services","Array","from","values","Promise","all","__spreadArray","filter","service","map","INTERNAL","__read","_delete","_a","opts","_b","isComponentSet","_e","instanceIdentifier_1","normalizedDeferredIdentifier","invokeOnInitCallbacks","onInitCallbacks","add","_this","normalizeIdentifierForFactory","undefined","ComponentContainer","provider","getProvider","setComponent","providers","addComponent"],"sources":["E:\\movie\\loanLender\\loanlender\\node_modules\\@firebase\\component\\src\\component.ts","E:\\movie\\loanLender\\loanlender\\node_modules\\@firebase\\component\\src\\constants.ts","E:\\movie\\loanLender\\loanlender\\node_modules\\@firebase\\component\\src\\provider.ts","E:\\movie\\loanLender\\loanlender\\node_modules\\@firebase\\component\\src\\component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private onInitCallbacks: Set<OnInitCallBack<T>> = new Set();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier: string = DEFAULT_ENTRY_NAME): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    const { identifier, optional } = {\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false,\n      ...options\n    };\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { instanceIdentifier = DEFAULT_ENTRY_NAME, options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    this.invokeOnInitCallbacks(instance, normalizedIdentifier);\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>): () => void {\n    this.onInitCallbacks.add(callback);\n\n    return () => {\n      this.onInitCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    for (const callback of this.onInitCallbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(identifier: string): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return (this.providers.get(name) as unknown) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, (provider as unknown) as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}